{ pkgs, lib }:
pkgs.stdenv.mkDerivation (with pkgs; rec {
  pname = "jndi-injection-exploit";
  version = "1.0";

  nativeBuildInputs = [ makeWrapper jdk_headless maven ];


  src = fetchFromGitHub {
    owner = "Marven11";
    repo = "JNDI-Injection-Exploit";
    rev = "1.0";
    sha256 = "sha256-zMT2KUhfubK8KOvZOyWcd/KAbl+iIvOuoeqgVOvFvPg=";
  };

  sourceRoot = ".";
  dontConfigure = true;

  dependencies = with stdenv;
    mkDerivation {
      name = "maven-${pname}-${version}-dependencies";
      buildInputs = [ jdk_headless maven ];
      src = src;
      buildPhase = ''
        while mvn package -Dmaven.repo.local=$out/.m2 -Dmaven.wagon.rto=5000; [ $? = 1 ]; do
          echo "timeout, restart maven to continue downloading"
        done
      '';
      # keep only *.{pom,jar,sha1,nbm} and delete all ephemeral files with lastModified timestamps inside
      installPhase = ''
        find $out/.m2 -type f -regex '.+\\(\\.lastUpdated\\|resolver-status\\.properties\\|_remote\\.repositories\\)' -delete
      '';
      outputHashAlgo = "sha256";
      outputHashMode = "recursive";
      outputHash = "sha256-QFUHhfdhO7XzdIjrz7+PW0NUYqvJ2iH533tsxH4aHUQ=";
    };

  buildPhase = ''
    cd source
    mvn package --offline -Dmaven.repo.local=${dependencies}/.m2

  '';

  installPhase = ''
    runHook preInstall

    mkdir -p $out/share
    cp -R target/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar  $out/share/
    runHook postInstall
  '';


  postFixup = ''
    makeWrapper ${jre}/bin/java $out/bin/JNDI-Injection-Exploit \
      --add-flags "-jar $out/share/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar" \
      --prefix PATH : ${lib.makeBinPath [ jre ]} \
      --set JAVA_HOME ${lib.getBin jre} \
      "''${gappsWrapperArgs[@]}"
  '';


})
